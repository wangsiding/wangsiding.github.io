<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2024/07/10/Promise(%E5%BC%82%E6%AD%A5)/"/>
      <url>/2024/07/10/Promise(%E5%BC%82%E6%AD%A5)/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><h3 id="一、Promise相关的常用方法"><a href="#一、Promise相关的常用方法" class="headerlink" title="一、Promise相关的常用方法"></a>一、Promise相关的常用方法</h3><h5 id="1-Promise-race"><a href="#1-Promise-race" class="headerlink" title="1. Promise.race"></a>1. Promise.race</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// let p1=new Promise((resolve,reject)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     reject(new TypeError(&quot;hello world is error&quot;))</span></span><br><span class="line"><span class="comment">// &#125;).then(()=&gt;&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#125;).catch((error)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     console.log(error)</span></span><br><span class="line"><span class="comment">// &#125;).finally(()=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     console.log(&quot;The end!&quot;)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="keyword">let</span> p1=<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line">    &#125;,<span class="number">3000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> p2=<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&quot;appear new Error(TIME OUT!)&quot;</span>)</span><br><span class="line">    &#125;,<span class="number">30000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([p1,p2]).<span class="title function_">then</span>(<span class="function">(<span class="params">end</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(end)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">error1</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error1)</span><br><span class="line">&#125;).<span class="title function_">finally</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;The end!&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="3-知识点"><a href="#3-知识点" class="headerlink" title="3.知识点"></a>3.知识点</h5><p>Vue nextTick DOM是更新后执行的回调函数</p><p>nodejs下一次轮询执行的回调函数</p><p>三者之间的打印顺序先是Promise然后是setImmediate最后是setTimeout</p><h5 id="2-Promise-all"><a href="#2-Promise-all" class="headerlink" title="2.Promise.all"></a>2.Promise.all</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1=<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&quot;p1&quot;</span>)</span><br><span class="line">    &#125;,<span class="number">3000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2=<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&quot;p2&quot;</span>)</span><br><span class="line">    &#125;,<span class="number">6000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p3=<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&quot;p3&quot;</span>)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([p1,p2,p3]).<span class="title function_">then</span>(<span class="function">(<span class="params">end</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(end)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//打印顺序和数组顺序一样,不会受定时器影响</span></span><br><span class="line"><span class="comment">//打印结果为:[&#x27;p1&#x27;,&#x27;p2&#x27;,&#x27;p3&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="二、nextTick-setTimeout-setImmediate"><a href="#二、nextTick-setTimeout-setImmediate" class="headerlink" title="二、nextTick,setTimeout,setImmediate"></a>二、nextTick,setTimeout,setImmediate</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Hello会在下一次循环打印</span></span><br><span class="line">process.<span class="title function_">nextTick</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;world&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//比较两者之间的打印顺序</span></span><br><span class="line">process.<span class="title function_">nextTick</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;world&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;set time out&quot;</span>)</span><br><span class="line">&#125;,<span class="number">3000</span>)</span><br><span class="line"><span class="keyword">let</span> p3=<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;are you ok&quot;</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">resolve</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;resolve&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//答案:先打印promise再打印setTimeout</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;set time out&quot;</span>)</span><br><span class="line">&#125;,<span class="number">3000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p3=<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;are you ok&quot;</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">resolve</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;resolve&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//运行结果:resolvehello world 等待3秒然后打印set time out</span></span><br></pre></td></tr></table></figure><h3 id="三、-then链式调用"><a href="#三、-then链式调用" class="headerlink" title="三、.then链式调用"></a>三、.then链式调用</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/07/02/2024-7-2/"/>
      <url>/2024/07/02/2024-7-2/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="AUTHOR-王四鼎-TIME-2024-7-2"><a href="#AUTHOR-王四鼎-TIME-2024-7-2" class="headerlink" title="AUTHOR:王四鼎 TIME:2024-7-2"></a>AUTHOR:王四鼎 TIME:2024-7-2</h1><h1 id="Linux系统"><a href="#Linux系统" class="headerlink" title="Linux系统"></a>Linux系统</h1><h2 id="常见的Linux"><a href="#常见的Linux" class="headerlink" title="常见的Linux"></a>常见的Linux</h2><p>Ubuntu ,Redhat,CenterOS一般用来作服务器，阿里云</p><p>macOS,类UNIX系统</p><p>UNIX大型的付费系统</p><p>游戏开发, windows系统, macos, c&#x2F;c++ java</p><p>游戏引擎，unreal， unity， cocos2d&#x2F;3d(专门做苹果移动端)</p><p>mac，metal</p><p>苹果科技春晚，最重要的科技发布会，WWDC，ios&#x2F;macos&#x2F;iPadOS</p><p>微信小程序是以js为基础的，套用的facebook react框架</p><p>html，css，js</p><h2 id="Linux常用的命令"><a href="#Linux常用的命令" class="headerlink" title="Linux常用的命令"></a>Linux常用的命令</h2><h4 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h4><p>mv 1.cpp 2.c</p><p>把1.cpp移动并且改名为2.c</p><p>mv 1.cpp Day2</p><p>把1.cpp移动到Day2中去</p><p>mv 1.c .. &#x2F;Day3</p><p>把1.c移动到父目录并且改名为Day3</p><h4 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h4><p>查看当面目录下的文件</p><h4 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h4><p>查看当前目录</p><h4 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h4><p>切换目录</p><h4 id="ls-a"><a href="#ls-a" class="headerlink" title="ls -a"></a>ls -a</h4><p>显示当前目录下的隐藏文件</p><h4 id="ls-l"><a href="#ls-l" class="headerlink" title="ls-l"></a>ls-l</h4><p>显示当前文件的属性</p><h4 id="vi"><a href="#vi" class="headerlink" title="vi"></a>vi</h4><p>vi 1.txt创建一个文件</p><p>vi编辑器主要用来学习C语言</p><p>IDE是集成开发软件</p><h4 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h4><p>mkdir C创建一个名字为C的文件夹&#x2F;目录</p><h4 id="history"><a href="#history" class="headerlink" title="history"></a>history</h4><p>显示历史命令记录</p><h4 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h4><p>rm 1.txt删除文件</p><h4 id="rm-rf"><a href="#rm-rf" class="headerlink" title="rm -rf"></a>rm -rf</h4><p>rm -rf C删除文件夹&#x2F;目录</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="gcc-xxx-c-o-xxx"><a href="#gcc-xxx-c-o-xxx" class="headerlink" title="gcc xxx.c -o xxx"></a>gcc xxx.c -o xxx</h4><p>编译可执行的文件并生成xxx文件</p><h3 id="C扩展"><a href="#C扩展" class="headerlink" title="C扩展"></a>C扩展</h3><p>include</p><p>stdio.h就可以用printf ，scanf</p><p>std是命令空间，防止名字冲突</p><p>​两个max_number就会变成wed:: max_numbertied::max_number</p><p>io输入输出</p><h2 id="Linux文件系统"><a href="#Linux文件系统" class="headerlink" title="Linux文件系统"></a>Linux文件系统</h2><h4 id="-1"><a href="#-1" class="headerlink" title="."></a>.</h4><p>代表当前文件夹&#x2F;目录下</p><h4 id="-2"><a href="#-2" class="headerlink" title=".."></a>..</h4><p>代表上一层目录</p><h4 id="开头的文件"><a href="#开头的文件" class="headerlink" title=".开头的文件"></a>.开头的文件</h4><p>是隐藏文件</p><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h4 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h4><p>在当前目录下创建了一个空的git并且是隐藏文件</p><p>管理当前目录下的文件&#x2F;目录文件夹的变化</p><h4 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h4><p>查看当前目录下的文件&#x2F;目录有无变化</p><h4 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h4><p>将修改后的提交到暂缓区</p><h4 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h4><p>git commit -m”xxxx”</p><p>提交并且记录当前的操作信息</p><h4 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h4><p>记录相关日志</p><h2 id="小知识点"><a href="#小知识点" class="headerlink" title="小知识点"></a>小知识点</h2><h4 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h4><p>电子元器件0-1，识别不了人类语言</p><p>0000  0101  代表5</p><p>0000  0010  代表2</p><p>a  在ASCII中代表97</p><p>utf-8 utf-16，unicode字符集</p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
  
</search>
